#version 400 core

in vec2 position;
in vec3 normal;

out vec4 clipSpace;
out vec2 textureCoords;
out vec3 toCameraVector;
out vec3 fromLightVector;
out float visibility;
out vec3 toLightVector;
out vec3 surfaceNormal;

//uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec3 lightPosition;

uniform vec3 cameraPosition;

const float tiling = 4.0;//4.0

const float density = 0.0035;
const float gradient = 10.0;

void main(void) {
	
	vec4 worldPosition = modelMatrix * vec4(position.x, 0.0, position.y, 1.0);
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	clipSpace = projectionMatrix * positionRelativeToCam;
	gl_Position = clipSpace;
	textureCoords = vec2(position.x/2.0 + 0.5, position.y/2.0 + 0.5) * tiling;
 	toCameraVector = cameraPosition - worldPosition.xyz;
 	fromLightVector = worldPosition.xyz - lightPosition;
 	
 	surfaceNormal = (viewMatrix * vec4(normal,0.0)).xyz;
 	
 	toLightVector = lightPosition - worldPosition.xyz;
 	
 	vec4 positionRelativeToCam2 = modelMatrix * vec4(position,1.0,0.0);
 	
 	float distance = length(positionRelativeToCam.xyz);
 	//distance = 100;
	visibility = exp(-1*pow(distance*density,gradient));
	visibility = clamp(visibility,0.0,1.0);
}