package engineTester;

import java.util.ArrayList;
import java.util.List;

import org.lwjgl.opengl.Display;
import org.lwjgl.util.vector.Vector3f;

import entities.Camera;
import entities.Entity;
import entities.Light;
import entities.Player;
import models.RawModel;
import models.TexturedModel;
import objConverter.ModelData;
import objConverter.OBJFileLoader;
import renderEngine.DisplayManager;
import renderEngine.Loader;
import renderEngine.MasterRenderer;
import renderEngine.OBJLoader;
import terrains.Terrain;
import textures.ModelTexture;
import textures.TerrainTexture;
import textures.TerrainTexturePack;

public class MainGameLoop {

	public static void main(String[] args) {
		
		List<Terrain> terrains = new ArrayList<Terrain>();
		DisplayManager.createDisplay();
		Loader loader = new Loader();
		
		//**********TERRAIN TEXTURE STUFF*********
		
		TerrainTexture backgroundTexture = new TerrainTexture(loader.loadTexture("grass"));
		TerrainTexture rTexture = new TerrainTexture(loader.loadTexture("dirt"));
		TerrainTexture gTexture = new TerrainTexture(loader.loadTexture("pinkFlowers"));
		TerrainTexture bTexture = new TerrainTexture(loader.loadTexture("path"));
		
		TerrainTexturePack texturePack = new TerrainTexturePack(backgroundTexture,
				rTexture, gTexture, bTexture);
		TerrainTexture blendMap = new TerrainTexture(loader.loadTexture("blendMap"));
		
		//**************************
		
		ModelData data = OBJFileLoader.loadOBJ("grassPlant");
		RawModel grassModel = loader.loadToVAO(data.getVertices(), data.getTextureCoords(),
				data.getNormals(), data.getIndices());
		ModelData data1 = OBJFileLoader.loadOBJ("bigDoor");
		RawModel leavesModel = loader.loadToVAO(data1.getVertices(), data1.getTextureCoords(),
				data1.getNormals(), data1.getIndices());
		ModelData data2 = OBJFileLoader.loadOBJ("tree");
		RawModel treeModel = loader.loadToVAO(data2.getVertices(), data2.getTextureCoords(),
				data2.getNormals(), data2.getIndices());
		
		
		
		RawModel model = OBJLoader.loadObjModel("stall", loader);
		//RawModel TreeModel = OBJLoader.loadObjModel("leaves", loader);
		//RawModel barkModel = OBJLoader.loadObjModel("cube4", loader);
		//ModelTexture texture = new ModelTexture(loader.loadTexture("image"));
		//TexturedModel texturedModel = new TexturedModel(model,texture);
		
		TexturedModel staticModel = new TexturedModel(model, new ModelTexture(loader.loadTexture("stallTexture")));
		TexturedModel staticModel1 = new TexturedModel(leavesModel, new ModelTexture(loader.loadTexture("concrete")));
		TexturedModel grass = new TexturedModel(grassModel, new ModelTexture(loader.loadTexture("grassPlant")));
		grass.getTexture().setHasTransparency(true);
		grass.getTexture().setUseFakeLighting(true);
		TexturedModel tree = new TexturedModel(treeModel, new ModelTexture(loader.loadTexture("treeTexture")));
		
		ModelTexture texture = staticModel.getTexture();
		texture.setShineDamper(10);
		texture.setReflectivity(1);
		
		ModelTexture treeTexture = staticModel1.getTexture();
		treeTexture.setShineDamper(20);
		treeTexture.setReflectivity(.5f);
		
		ModelTexture cubeTexture = grass.getTexture();
		cubeTexture.setShineDamper(20);
		cubeTexture.setReflectivity(.5f);
		
		//Terrain terrain = new Terrain(0,0,loader, texturePack, blendMap, "heightmap");
		terrains.add( new Terrain(0,0,loader, texturePack, blendMap, "heightmap"));
		terrains.add( new Terrain(-1,0,loader, texturePack, blendMap, "heightmap"));
		terrains.add( new Terrain(0,-1,loader, texturePack, blendMap, "heightmap"));
		terrains.add( new Terrain(-1,-1,loader, texturePack, blendMap, "heightmap"));
		
		List<Entity> entities = new ArrayList<Entity>();
		for(int i = 0; i < 500; i++){
			float x = (float) ((Math.random() * 1600) - 800);
			float z = (float) ((Math.random() * 1600) - 800);
			float y = 0;
			for(Terrain each:terrains){
				if(each.checkTerrain((int)x, (int)z) == true){
					y = (float)each.getHeightOfTerrain(x, z);
				}
			}
			//float y = terrain.getHeightOfTerrain(x, z);
			entities.add( new Entity(grass, new Vector3f(x, y, z),0,0,0,3));
		}
		for(int i = 0; i < 100; i++){
			float x = (float) ((Math.random() * 1600) - 800);
			float z = (float) ((Math.random() * 1600) - 800);
			float y = 0;
			for(Terrain each:terrains){
				if(each.checkTerrain((int)x, (int)z) == true){
					y = (float)each.getHeightOfTerrain(x, z);
				}
			}
			//float y = terrain.getHeightOfTerrain(x, z);
			entities.add( new Entity(tree, new Vector3f(x, y, z),
					0,(float)(Math.random()*360),0,(float)(Math.random()*1)+2));
		}
		
		Entity entity = new Entity(staticModel, new Vector3f(0,0,-50),0,0,0,1);
		Entity entity1 = new Entity(staticModel1, new Vector3f(0,0,-100),0,90,0,3);
		//Entity cubeEntity = new Entity(grass, new Vector3f(0,0,-30),0,0,0,1);
		Light light = new Light(new Vector3f(0,0,-20),new Vector3f(1,1,1));
		
		MasterRenderer renderer = new MasterRenderer();
		
		ModelData data3 = OBJFileLoader.loadOBJ("stanfordBunny");
 		RawModel bunnyModel = loader.loadToVAO(data3.getVertices(), data3.getTextureCoords(),
				data3.getNormals(), data3.getIndices());
		TexturedModel stanfordBunny = new TexturedModel(bunnyModel, new ModelTexture(loader.loadTexture("white")));
		
		int playerX = 0;
		int playerZ = 0;
		Player player = new Player(stanfordBunny, new Vector3f(playerX,0,playerZ), 0, 180, 0, 0.5f);
		Camera camera = new Camera(player);
		
		boolean itIsOnTerrain = false;
		while(!Display.isCloseRequested()){
			entity.increaseRotation(0, -1, 0);
			//cubeEntity.increaseRotation(0, -1, 0);
			camera.move();
			for(Terrain each:terrains)
			{
				if((each.checkTerrain((int)player.getPosition().x, (int)player.getPosition().z)) == false){
					itIsOnTerrain = false;
				}else{
					player.move(each);
					itIsOnTerrain = true;
				}
				renderer.processTerrain(each);
			}
			
			/*if(!itIsOnTerrain){
				player.move(terrains.get(0));
			}*/
			
			//player.move(terrain);
			renderer.processEntity(player);
			//renderer.processTerrain(terrain);
			//renderer.processEntity(entity);
			renderer.processEntity(entity1);
			for(Entity each:entities){
				renderer.processEntity(each);
			}
			
			renderer.render(light, camera);
			DisplayManager.updateDisplay();	
		}
		renderer.clenUp();
		loader.cleanUp();
		DisplayManager.closeDisplay();

	}

}
